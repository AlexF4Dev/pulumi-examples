// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Crds.Configuration.V1
{
    /// <summary>
    /// KongClusterPlugin is the Schema for the kongclusterplugins API
    /// </summary>
    [CrdsResourceType("kubernetes:configuration.konghq.com/v1:KongClusterPlugin")]
    public partial class KongClusterPlugin : KubernetesResource
    {
        [Output("apiVersion")]
        public Output<string> ApiVersion { get; private set; } = null!;

        /// <summary>
        /// Config contains the plugin configuration.
        /// </summary>
        [Output("config")]
        public Output<ImmutableDictionary<string, object>> Config { get; private set; } = null!;

        /// <summary>
        /// ConfigFrom references a secret containing the plugin configuration.
        /// </summary>
        [Output("configFrom")]
        public Output<Pulumi.Kubernetes.Types.Outputs.Configuration.V1.KongClusterPluginConfigfrom> ConfigFrom { get; private set; } = null!;

        /// <summary>
        /// ConsumerRef is a reference to a particular consumer
        /// </summary>
        [Output("consumerRef")]
        public Output<string> ConsumerRef { get; private set; } = null!;

        /// <summary>
        /// Disabled set if the plugin is disabled or not
        /// </summary>
        [Output("disabled")]
        public Output<bool> Disabled { get; private set; } = null!;

        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        [Output("metadata")]
        public Output<Pulumi.Kubernetes.Types.Outputs.Meta.V1.ObjectMeta> Metadata { get; private set; } = null!;

        /// <summary>
        /// Ordering overrides the normal plugin execution order
        /// </summary>
        [Output("ordering")]
        public Output<Pulumi.Kubernetes.Types.Outputs.Configuration.V1.KongClusterPluginOrdering> Ordering { get; private set; } = null!;

        /// <summary>
        /// PluginName is the name of the plugin to which to apply the config
        /// </summary>
        [Output("plugin")]
        public Output<string> Plugin { get; private set; } = null!;

        /// <summary>
        /// Protocols configures plugin to run on requests received on specific protocols.
        /// </summary>
        [Output("protocols")]
        public Output<ImmutableArray<string>> Protocols { get; private set; } = null!;

        /// <summary>
        /// RunOn configures the plugin to run on the first or the second or both nodes in case of a service mesh deployment.
        /// </summary>
        [Output("run_on")]
        public Output<string> Run_on { get; private set; } = null!;


        /// <summary>
        /// Create a KongClusterPlugin resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KongClusterPlugin(string name, Pulumi.Kubernetes.Types.Inputs.Configuration.V1.KongClusterPluginArgs? args = null, CustomResourceOptions? options = null)
            : base("kubernetes:configuration.konghq.com/v1:KongClusterPlugin", name, MakeArgs(args), MakeResourceOptions(options, ""))
        {
        }
        internal KongClusterPlugin(string name, ImmutableDictionary<string, object?> dictionary, CustomResourceOptions? options = null)
            : base("kubernetes:configuration.konghq.com/v1:KongClusterPlugin", name, new DictionaryResourceArgs(dictionary), MakeResourceOptions(options, ""))
        {
        }

        private KongClusterPlugin(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("kubernetes:configuration.konghq.com/v1:KongClusterPlugin", name, null, MakeResourceOptions(options, id))
        {
        }

        private static Pulumi.Kubernetes.Types.Inputs.Configuration.V1.KongClusterPluginArgs? MakeArgs(Pulumi.Kubernetes.Types.Inputs.Configuration.V1.KongClusterPluginArgs? args)
        {
            args ??= new Pulumi.Kubernetes.Types.Inputs.Configuration.V1.KongClusterPluginArgs();
            args.ApiVersion = "configuration.konghq.com/v1";
            args.Kind = "KongClusterPlugin";
            return args;
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KongClusterPlugin resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KongClusterPlugin Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new KongClusterPlugin(name, id, options);
        }
    }
}
namespace Pulumi.Kubernetes.Types.Inputs.Configuration.V1
{

    public class KongClusterPluginArgs : Pulumi.ResourceArgs
    {
        [Input("apiVersion")]
        public Input<string>? ApiVersion { get; set; }

        [Input("config")]
        private InputMap<object>? _config;

        /// <summary>
        /// Config contains the plugin configuration.
        /// </summary>
        public InputMap<object> Config
        {
            get => _config ?? (_config = new InputMap<object>());
            set => _config = value;
        }

        /// <summary>
        /// ConfigFrom references a secret containing the plugin configuration.
        /// </summary>
        [Input("configFrom")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Configuration.V1.KongClusterPluginConfigfromArgs>? ConfigFrom { get; set; }

        /// <summary>
        /// ConsumerRef is a reference to a particular consumer
        /// </summary>
        [Input("consumerRef")]
        public Input<string>? ConsumerRef { get; set; }

        /// <summary>
        /// Disabled set if the plugin is disabled or not
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        [Input("kind")]
        public Input<string>? Kind { get; set; }

        [Input("metadata")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Meta.V1.ObjectMetaArgs>? Metadata { get; set; }

        /// <summary>
        /// Ordering overrides the normal plugin execution order
        /// </summary>
        [Input("ordering")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Configuration.V1.KongClusterPluginOrderingArgs>? Ordering { get; set; }

        /// <summary>
        /// PluginName is the name of the plugin to which to apply the config
        /// </summary>
        [Input("plugin")]
        public Input<string>? Plugin { get; set; }

        [Input("protocols")]
        private InputList<string>? _protocols;

        /// <summary>
        /// Protocols configures plugin to run on requests received on specific protocols.
        /// </summary>
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        /// <summary>
        /// RunOn configures the plugin to run on the first or the second or both nodes in case of a service mesh deployment.
        /// </summary>
        [Input("run_on")]
        public Input<string>? Run_on { get; set; }

        public KongClusterPluginArgs()
        {
        }
    }
}

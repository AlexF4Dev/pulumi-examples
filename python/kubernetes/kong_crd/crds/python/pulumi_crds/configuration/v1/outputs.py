# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'KongClusterPluginConfigfrom',
    'KongClusterPluginConfigfromSecretkeyref',
    'KongClusterPluginOrdering',
]

@pulumi.output_type
class KongClusterPluginConfigfrom(dict):
    """
    ConfigFrom references a secret containing the plugin configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretKeyRef":
            suggest = "secret_key_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KongClusterPluginConfigfrom. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KongClusterPluginConfigfrom.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KongClusterPluginConfigfrom.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret_key_ref: Optional['outputs.KongClusterPluginConfigfromSecretkeyref'] = None):
        """
        ConfigFrom references a secret containing the plugin configuration.
        :param 'KongClusterPluginConfigfromSecretkeyrefArgs' secret_key_ref: NamespacedSecretValueFromSource represents the source of a secret value specifying the secret namespace
        """
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.KongClusterPluginConfigfromSecretkeyref']:
        """
        NamespacedSecretValueFromSource represents the source of a secret value specifying the secret namespace
        """
        return pulumi.get(self, "secret_key_ref")


@pulumi.output_type
class KongClusterPluginConfigfromSecretkeyref(dict):
    """
    NamespacedSecretValueFromSource represents the source of a secret value specifying the secret namespace
    """
    def __init__(__self__, *,
                 key: str,
                 name: str,
                 namespace: str):
        """
        NamespacedSecretValueFromSource represents the source of a secret value specifying the secret namespace
        :param str key: the key containing the value
        :param str name: the secret containing the key
        :param str namespace: The namespace containing the secret
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        the key containing the value
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the secret containing the key
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace containing the secret
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class KongClusterPluginOrdering(dict):
    """
    Ordering overrides the normal plugin execution order
    """
    def __init__(__self__, *,
                 after: Optional[Mapping[str, Sequence[str]]] = None,
                 before: Optional[Mapping[str, Sequence[str]]] = None):
        """
        Ordering overrides the normal plugin execution order
        :param Mapping[str, Sequence[str]] after: PluginOrderingPhase indicates which plugins in a phase should affect the target plugin's order
        :param Mapping[str, Sequence[str]] before: PluginOrderingPhase indicates which plugins in a phase should affect the target plugin's order
        """
        if after is not None:
            pulumi.set(__self__, "after", after)
        if before is not None:
            pulumi.set(__self__, "before", before)

    @property
    @pulumi.getter
    def after(self) -> Optional[Mapping[str, Sequence[str]]]:
        """
        PluginOrderingPhase indicates which plugins in a phase should affect the target plugin's order
        """
        return pulumi.get(self, "after")

    @property
    @pulumi.getter
    def before(self) -> Optional[Mapping[str, Sequence[str]]]:
        """
        PluginOrderingPhase indicates which plugins in a phase should affect the target plugin's order
        """
        return pulumi.get(self, "before")



# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'KongClusterPluginConfigfromSecretkeyrefArgs',
    'KongClusterPluginConfigfromArgs',
    'KongClusterPluginOrderingArgs',
]

@pulumi.input_type
class KongClusterPluginConfigfromSecretkeyrefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: pulumi.Input[str],
                 namespace: pulumi.Input[str]):
        """
        NamespacedSecretValueFromSource represents the source of a secret value specifying the secret namespace
        :param pulumi.Input[str] key: the key containing the value
        :param pulumi.Input[str] name: the secret containing the key
        :param pulumi.Input[str] namespace: The namespace containing the secret
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        the key containing the value
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        the secret containing the key
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The namespace containing the secret
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class KongClusterPluginConfigfromArgs:
    def __init__(__self__, *,
                 secret_key_ref: Optional[pulumi.Input['KongClusterPluginConfigfromSecretkeyrefArgs']] = None):
        """
        ConfigFrom references a secret containing the plugin configuration.
        :param pulumi.Input['KongClusterPluginConfigfromSecretkeyrefArgs'] secret_key_ref: NamespacedSecretValueFromSource represents the source of a secret value specifying the secret namespace
        """
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input['KongClusterPluginConfigfromSecretkeyrefArgs']]:
        """
        NamespacedSecretValueFromSource represents the source of a secret value specifying the secret namespace
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input['KongClusterPluginConfigfromSecretkeyrefArgs']]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class KongClusterPluginOrderingArgs:
    def __init__(__self__, *,
                 after: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 before: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None):
        """
        Ordering overrides the normal plugin execution order
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] after: PluginOrderingPhase indicates which plugins in a phase should affect the target plugin's order
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] before: PluginOrderingPhase indicates which plugins in a phase should affect the target plugin's order
        """
        if after is not None:
            pulumi.set(__self__, "after", after)
        if before is not None:
            pulumi.set(__self__, "before", before)

    @property
    @pulumi.getter
    def after(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        """
        PluginOrderingPhase indicates which plugins in a phase should affect the target plugin's order
        """
        return pulumi.get(self, "after")

    @after.setter
    def after(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "after", value)

    @property
    @pulumi.getter
    def before(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        """
        PluginOrderingPhase indicates which plugins in a phase should affect the target plugin's order
        """
        return pulumi.get(self, "before")

    @before.setter
    def before(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "before", value)



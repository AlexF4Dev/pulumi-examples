# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *
from pulumi_kubernetes import meta as _meta

__all__ = ['KongClusterPluginArgs', 'KongClusterPlugin']

@pulumi.input_type
class KongClusterPluginArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 config: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 config_from: Optional[pulumi.Input['KongClusterPluginConfigfromArgs']] = None,
                 consumer_ref: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input['_meta.v1.ObjectMetaArgs']] = None,
                 ordering: Optional[pulumi.Input['KongClusterPluginOrderingArgs']] = None,
                 plugin: Optional[pulumi.Input[str]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 run_on: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a KongClusterPlugin resource.
        :param pulumi.Input[Mapping[str, Any]] config: Config contains the plugin configuration.
        :param pulumi.Input['KongClusterPluginConfigfromArgs'] config_from: ConfigFrom references a secret containing the plugin configuration.
        :param pulumi.Input[str] consumer_ref: ConsumerRef is a reference to a particular consumer
        :param pulumi.Input[bool] disabled: Disabled set if the plugin is disabled or not
        :param pulumi.Input['KongClusterPluginOrderingArgs'] ordering: Ordering overrides the normal plugin execution order
        :param pulumi.Input[str] plugin: PluginName is the name of the plugin to which to apply the config
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: Protocols configures plugin to run on requests received on specific protocols.
        :param pulumi.Input[str] run_on: RunOn configures the plugin to run on the first or the second or both nodes in case of a service mesh deployment.
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", 'configuration.konghq.com/v1')
        if config is not None:
            pulumi.set(__self__, "config", config)
        if config_from is not None:
            pulumi.set(__self__, "config_from", config_from)
        if consumer_ref is not None:
            pulumi.set(__self__, "consumer_ref", consumer_ref)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if kind is not None:
            pulumi.set(__self__, "kind", 'KongClusterPlugin')
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if ordering is not None:
            pulumi.set(__self__, "ordering", ordering)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if run_on is not None:
            pulumi.set(__self__, "run_on", run_on)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Config contains the plugin configuration.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="configFrom")
    def config_from(self) -> Optional[pulumi.Input['KongClusterPluginConfigfromArgs']]:
        """
        ConfigFrom references a secret containing the plugin configuration.
        """
        return pulumi.get(self, "config_from")

    @config_from.setter
    def config_from(self, value: Optional[pulumi.Input['KongClusterPluginConfigfromArgs']]):
        pulumi.set(self, "config_from", value)

    @property
    @pulumi.getter(name="consumerRef")
    def consumer_ref(self) -> Optional[pulumi.Input[str]]:
        """
        ConsumerRef is a reference to a particular consumer
        """
        return pulumi.get(self, "consumer_ref")

    @consumer_ref.setter
    def consumer_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_ref", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Disabled set if the plugin is disabled or not
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['_meta.v1.ObjectMetaArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['_meta.v1.ObjectMetaArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def ordering(self) -> Optional[pulumi.Input['KongClusterPluginOrderingArgs']]:
        """
        Ordering overrides the normal plugin execution order
        """
        return pulumi.get(self, "ordering")

    @ordering.setter
    def ordering(self, value: Optional[pulumi.Input['KongClusterPluginOrderingArgs']]):
        pulumi.set(self, "ordering", value)

    @property
    @pulumi.getter
    def plugin(self) -> Optional[pulumi.Input[str]]:
        """
        PluginName is the name of the plugin to which to apply the config
        """
        return pulumi.get(self, "plugin")

    @plugin.setter
    def plugin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plugin", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Protocols configures plugin to run on requests received on specific protocols.
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter
    def run_on(self) -> Optional[pulumi.Input[str]]:
        """
        RunOn configures the plugin to run on the first or the second or both nodes in case of a service mesh deployment.
        """
        return pulumi.get(self, "run_on")

    @run_on.setter
    def run_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_on", value)


class KongClusterPlugin(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_version: Optional[pulumi.Input[str]] = None,
                 config: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 config_from: Optional[pulumi.Input[pulumi.InputType['KongClusterPluginConfigfromArgs']]] = None,
                 consumer_ref: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[pulumi.InputType['_meta.v1.ObjectMetaArgs']]] = None,
                 ordering: Optional[pulumi.Input[pulumi.InputType['KongClusterPluginOrderingArgs']]] = None,
                 plugin: Optional[pulumi.Input[str]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 run_on: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        KongClusterPlugin is the Schema for the kongclusterplugins API

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, Any]] config: Config contains the plugin configuration.
        :param pulumi.Input[pulumi.InputType['KongClusterPluginConfigfromArgs']] config_from: ConfigFrom references a secret containing the plugin configuration.
        :param pulumi.Input[str] consumer_ref: ConsumerRef is a reference to a particular consumer
        :param pulumi.Input[bool] disabled: Disabled set if the plugin is disabled or not
        :param pulumi.Input[pulumi.InputType['KongClusterPluginOrderingArgs']] ordering: Ordering overrides the normal plugin execution order
        :param pulumi.Input[str] plugin: PluginName is the name of the plugin to which to apply the config
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: Protocols configures plugin to run on requests received on specific protocols.
        :param pulumi.Input[str] run_on: RunOn configures the plugin to run on the first or the second or both nodes in case of a service mesh deployment.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[KongClusterPluginArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        KongClusterPlugin is the Schema for the kongclusterplugins API

        :param str resource_name: The name of the resource.
        :param KongClusterPluginArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KongClusterPluginArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_version: Optional[pulumi.Input[str]] = None,
                 config: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 config_from: Optional[pulumi.Input[pulumi.InputType['KongClusterPluginConfigfromArgs']]] = None,
                 consumer_ref: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[pulumi.InputType['_meta.v1.ObjectMetaArgs']]] = None,
                 ordering: Optional[pulumi.Input[pulumi.InputType['KongClusterPluginOrderingArgs']]] = None,
                 plugin: Optional[pulumi.Input[str]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 run_on: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KongClusterPluginArgs.__new__(KongClusterPluginArgs)

            __props__.__dict__["api_version"] = 'configuration.konghq.com/v1'
            __props__.__dict__["config"] = config
            __props__.__dict__["config_from"] = config_from
            __props__.__dict__["consumer_ref"] = consumer_ref
            __props__.__dict__["disabled"] = disabled
            __props__.__dict__["kind"] = 'KongClusterPlugin'
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["ordering"] = ordering
            __props__.__dict__["plugin"] = plugin
            __props__.__dict__["protocols"] = protocols
            __props__.__dict__["run_on"] = run_on
        super(KongClusterPlugin, __self__).__init__(
            'kubernetes:configuration.konghq.com/v1:KongClusterPlugin',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'KongClusterPlugin':
        """
        Get an existing KongClusterPlugin resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = KongClusterPluginArgs.__new__(KongClusterPluginArgs)

        __props__.__dict__["api_version"] = None
        __props__.__dict__["config"] = None
        __props__.__dict__["config_from"] = None
        __props__.__dict__["consumer_ref"] = None
        __props__.__dict__["disabled"] = None
        __props__.__dict__["kind"] = None
        __props__.__dict__["metadata"] = None
        __props__.__dict__["ordering"] = None
        __props__.__dict__["plugin"] = None
        __props__.__dict__["protocols"] = None
        __props__.__dict__["run_on"] = None
        return KongClusterPlugin(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Config contains the plugin configuration.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="configFrom")
    def config_from(self) -> pulumi.Output[Optional['outputs.KongClusterPluginConfigfrom']]:
        """
        ConfigFrom references a secret containing the plugin configuration.
        """
        return pulumi.get(self, "config_from")

    @property
    @pulumi.getter(name="consumerRef")
    def consumer_ref(self) -> pulumi.Output[Optional[str]]:
        """
        ConsumerRef is a reference to a particular consumer
        """
        return pulumi.get(self, "consumer_ref")

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Disabled set if the plugin is disabled or not
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional['_meta.v1.outputs.ObjectMeta']]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def ordering(self) -> pulumi.Output[Optional['outputs.KongClusterPluginOrdering']]:
        """
        Ordering overrides the normal plugin execution order
        """
        return pulumi.get(self, "ordering")

    @property
    @pulumi.getter
    def plugin(self) -> pulumi.Output[str]:
        """
        PluginName is the name of the plugin to which to apply the config
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def protocols(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Protocols configures plugin to run on requests received on specific protocols.
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter
    def run_on(self) -> pulumi.Output[Optional[str]]:
        """
        RunOn configures the plugin to run on the first or the second or both nodes in case of a service mesh deployment.
        """
        return pulumi.get(self, "run_on")


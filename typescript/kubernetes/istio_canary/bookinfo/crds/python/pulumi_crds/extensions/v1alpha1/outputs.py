# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'WasmPluginSpec',
    'WasmPluginSpecSelector',
]

@pulumi.output_type
class WasmPluginSpec(dict):
    """
    Extend the functionality provided by the Istio proxy through WebAssembly filters. See more details at: https://istio.io/docs/reference/config/proxy_extensions/wasm-plugin.html
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imagePullPolicy":
            suggest = "image_pull_policy"
        elif key == "imagePullSecret":
            suggest = "image_pull_secret"
        elif key == "pluginConfig":
            suggest = "plugin_config"
        elif key == "pluginName":
            suggest = "plugin_name"
        elif key == "verificationKey":
            suggest = "verification_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WasmPluginSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WasmPluginSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WasmPluginSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_pull_policy: Optional[str] = None,
                 image_pull_secret: Optional[str] = None,
                 phase: Optional[str] = None,
                 plugin_config: Optional[Mapping[str, Any]] = None,
                 plugin_name: Optional[str] = None,
                 priority: Optional[int] = None,
                 selector: Optional['outputs.WasmPluginSpecSelector'] = None,
                 sha256: Optional[str] = None,
                 url: Optional[str] = None,
                 verification_key: Optional[str] = None):
        """
        Extend the functionality provided by the Istio proxy through WebAssembly filters. See more details at: https://istio.io/docs/reference/config/proxy_extensions/wasm-plugin.html
        :param str image_pull_policy: The pull behaviour to be applied when fetching an OCI image.
        :param str image_pull_secret: Credentials to use for OCI image pulling.
        :param str phase: Determines where in the filter chain this `WasmPlugin` is to be injected.
        :param Mapping[str, Any] plugin_config: The configuration that will be passed on to the plugin.
        :param int priority: Determines ordering of `WasmPlugins` in the same `phase`.
        :param str sha256: SHA256 checksum that will be used to verify Wasm module or OCI container.
        :param str url: URL of a Wasm module or OCI container.
        """
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if image_pull_secret is not None:
            pulumi.set(__self__, "image_pull_secret", image_pull_secret)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)
        if plugin_config is not None:
            pulumi.set(__self__, "plugin_config", plugin_config)
        if plugin_name is not None:
            pulumi.set(__self__, "plugin_name", plugin_name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if sha256 is not None:
            pulumi.set(__self__, "sha256", sha256)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if verification_key is not None:
            pulumi.set(__self__, "verification_key", verification_key)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        """
        The pull behaviour to be applied when fetching an OCI image.
        """
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter(name="imagePullSecret")
    def image_pull_secret(self) -> Optional[str]:
        """
        Credentials to use for OCI image pulling.
        """
        return pulumi.get(self, "image_pull_secret")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        Determines where in the filter chain this `WasmPlugin` is to be injected.
        """
        return pulumi.get(self, "phase")

    @property
    @pulumi.getter(name="pluginConfig")
    def plugin_config(self) -> Optional[Mapping[str, Any]]:
        """
        The configuration that will be passed on to the plugin.
        """
        return pulumi.get(self, "plugin_config")

    @property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> Optional[str]:
        return pulumi.get(self, "plugin_name")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        Determines ordering of `WasmPlugins` in the same `phase`.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def selector(self) -> Optional['outputs.WasmPluginSpecSelector']:
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter
    def sha256(self) -> Optional[str]:
        """
        SHA256 checksum that will be used to verify Wasm module or OCI container.
        """
        return pulumi.get(self, "sha256")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL of a Wasm module or OCI container.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="verificationKey")
    def verification_key(self) -> Optional[str]:
        return pulumi.get(self, "verification_key")


@pulumi.output_type
class WasmPluginSpecSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WasmPluginSpecSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WasmPluginSpecSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WasmPluginSpecSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_labels: Optional[Mapping[str, str]] = None):
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "match_labels")



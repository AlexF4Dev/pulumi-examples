# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'PeerAuthenticationSpec',
    'PeerAuthenticationSpecMtls',
    'PeerAuthenticationSpecPortLevelMtls',
    'PeerAuthenticationSpecSelector',
    'RequestAuthenticationSpec',
    'RequestAuthenticationSpecJwtRules',
    'RequestAuthenticationSpecJwtRulesFromHeaders',
    'RequestAuthenticationSpecSelector',
]

@pulumi.output_type
class PeerAuthenticationSpec(dict):
    """
    PeerAuthentication defines how traffic will be tunneled (or not) to the sidecar.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portLevelMtls":
            suggest = "port_level_mtls"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PeerAuthenticationSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PeerAuthenticationSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PeerAuthenticationSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mtls: Optional['outputs.PeerAuthenticationSpecMtls'] = None,
                 port_level_mtls: Optional[Mapping[str, 'outputs.PeerAuthenticationSpecPortLevelMtls']] = None,
                 selector: Optional['outputs.PeerAuthenticationSpecSelector'] = None):
        """
        PeerAuthentication defines how traffic will be tunneled (or not) to the sidecar.
        :param 'PeerAuthenticationSpecMtlsArgs' mtls: Mutual TLS settings for workload.
        :param Mapping[str, 'PeerAuthenticationSpecPortLevelMtlsArgs'] port_level_mtls: Port specific mutual TLS settings.
        :param 'PeerAuthenticationSpecSelectorArgs' selector: The selector determines the workloads to apply the ChannelAuthentication on.
        """
        if mtls is not None:
            pulumi.set(__self__, "mtls", mtls)
        if port_level_mtls is not None:
            pulumi.set(__self__, "port_level_mtls", port_level_mtls)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def mtls(self) -> Optional['outputs.PeerAuthenticationSpecMtls']:
        """
        Mutual TLS settings for workload.
        """
        return pulumi.get(self, "mtls")

    @property
    @pulumi.getter(name="portLevelMtls")
    def port_level_mtls(self) -> Optional[Mapping[str, 'outputs.PeerAuthenticationSpecPortLevelMtls']]:
        """
        Port specific mutual TLS settings.
        """
        return pulumi.get(self, "port_level_mtls")

    @property
    @pulumi.getter
    def selector(self) -> Optional['outputs.PeerAuthenticationSpecSelector']:
        """
        The selector determines the workloads to apply the ChannelAuthentication on.
        """
        return pulumi.get(self, "selector")


@pulumi.output_type
class PeerAuthenticationSpecMtls(dict):
    """
    Mutual TLS settings for workload.
    """
    def __init__(__self__, *,
                 mode: Optional[str] = None):
        """
        Mutual TLS settings for workload.
        :param str mode: Defines the mTLS mode used for peer authentication.
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Defines the mTLS mode used for peer authentication.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class PeerAuthenticationSpecPortLevelMtls(dict):
    def __init__(__self__, *,
                 mode: Optional[str] = None):
        """
        :param str mode: Defines the mTLS mode used for peer authentication.
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Defines the mTLS mode used for peer authentication.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class PeerAuthenticationSpecSelector(dict):
    """
    The selector determines the workloads to apply the ChannelAuthentication on.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PeerAuthenticationSpecSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PeerAuthenticationSpecSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PeerAuthenticationSpecSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        The selector determines the workloads to apply the ChannelAuthentication on.
        """
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class RequestAuthenticationSpec(dict):
    """
    RequestAuthentication defines what request authentication methods are supported by a workload.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jwtRules":
            suggest = "jwt_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RequestAuthenticationSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RequestAuthenticationSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RequestAuthenticationSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jwt_rules: Optional[Sequence['outputs.RequestAuthenticationSpecJwtRules']] = None,
                 selector: Optional['outputs.RequestAuthenticationSpecSelector'] = None):
        """
        RequestAuthentication defines what request authentication methods are supported by a workload.
        :param Sequence['RequestAuthenticationSpecJwtRulesArgs'] jwt_rules: Define the list of JWTs that can be validated at the selected workloads' proxy.
        :param 'RequestAuthenticationSpecSelectorArgs' selector: Optional.
        """
        if jwt_rules is not None:
            pulumi.set(__self__, "jwt_rules", jwt_rules)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter(name="jwtRules")
    def jwt_rules(self) -> Optional[Sequence['outputs.RequestAuthenticationSpecJwtRules']]:
        """
        Define the list of JWTs that can be validated at the selected workloads' proxy.
        """
        return pulumi.get(self, "jwt_rules")

    @property
    @pulumi.getter
    def selector(self) -> Optional['outputs.RequestAuthenticationSpecSelector']:
        """
        Optional.
        """
        return pulumi.get(self, "selector")


@pulumi.output_type
class RequestAuthenticationSpecJwtRules(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forwardOriginalToken":
            suggest = "forward_original_token"
        elif key == "fromHeaders":
            suggest = "from_headers"
        elif key == "fromParams":
            suggest = "from_params"
        elif key == "jwksUri":
            suggest = "jwks_uri"
        elif key == "outputPayloadToHeader":
            suggest = "output_payload_to_header"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RequestAuthenticationSpecJwtRules. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RequestAuthenticationSpecJwtRules.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RequestAuthenticationSpecJwtRules.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audiences: Optional[Sequence[str]] = None,
                 forward_original_token: Optional[bool] = None,
                 from_headers: Optional[Sequence['outputs.RequestAuthenticationSpecJwtRulesFromHeaders']] = None,
                 from_params: Optional[Sequence[str]] = None,
                 issuer: Optional[str] = None,
                 jwks: Optional[str] = None,
                 jwks_uri: Optional[str] = None,
                 jwks_uri: Optional[str] = None,
                 output_payload_to_header: Optional[str] = None):
        """
        :param bool forward_original_token: If set to true, the original token will be kept for the upstream request.
        :param Sequence['RequestAuthenticationSpecJwtRulesFromHeadersArgs'] from_headers: List of header locations from which JWT is expected.
        :param Sequence[str] from_params: List of query parameters from which JWT is expected.
        :param str issuer: Identifies the issuer that issued the JWT.
        :param str jwks: JSON Web Key Set of public keys to validate signature of the JWT.
        """
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if forward_original_token is not None:
            pulumi.set(__self__, "forward_original_token", forward_original_token)
        if from_headers is not None:
            pulumi.set(__self__, "from_headers", from_headers)
        if from_params is not None:
            pulumi.set(__self__, "from_params", from_params)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if jwks is not None:
            pulumi.set(__self__, "jwks", jwks)
        if jwks_uri is not None:
            pulumi.set(__self__, "jwks_uri", jwks_uri)
        if jwks_uri is not None:
            pulumi.set(__self__, "jwks_uri", jwks_uri)
        if output_payload_to_header is not None:
            pulumi.set(__self__, "output_payload_to_header", output_payload_to_header)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "audiences")

    @property
    @pulumi.getter(name="forwardOriginalToken")
    def forward_original_token(self) -> Optional[bool]:
        """
        If set to true, the original token will be kept for the upstream request.
        """
        return pulumi.get(self, "forward_original_token")

    @property
    @pulumi.getter(name="fromHeaders")
    def from_headers(self) -> Optional[Sequence['outputs.RequestAuthenticationSpecJwtRulesFromHeaders']]:
        """
        List of header locations from which JWT is expected.
        """
        return pulumi.get(self, "from_headers")

    @property
    @pulumi.getter(name="fromParams")
    def from_params(self) -> Optional[Sequence[str]]:
        """
        List of query parameters from which JWT is expected.
        """
        return pulumi.get(self, "from_params")

    @property
    @pulumi.getter
    def issuer(self) -> Optional[str]:
        """
        Identifies the issuer that issued the JWT.
        """
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter
    def jwks(self) -> Optional[str]:
        """
        JSON Web Key Set of public keys to validate signature of the JWT.
        """
        return pulumi.get(self, "jwks")

    @property
    @pulumi.getter(name="jwksUri")
    def jwks_uri(self) -> Optional[str]:
        return pulumi.get(self, "jwks_uri")

    @property
    @pulumi.getter
    def jwks_uri(self) -> Optional[str]:
        return pulumi.get(self, "jwks_uri")

    @property
    @pulumi.getter(name="outputPayloadToHeader")
    def output_payload_to_header(self) -> Optional[str]:
        return pulumi.get(self, "output_payload_to_header")


@pulumi.output_type
class RequestAuthenticationSpecJwtRulesFromHeaders(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 prefix: Optional[str] = None):
        """
        :param str name: The HTTP header name.
        :param str prefix: The prefix that should be stripped before decoding the token.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The HTTP header name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        The prefix that should be stripped before decoding the token.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class RequestAuthenticationSpecSelector(dict):
    """
    Optional.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RequestAuthenticationSpecSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RequestAuthenticationSpecSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RequestAuthenticationSpecSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        Optional.
        """
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "match_labels")



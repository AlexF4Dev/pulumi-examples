# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'PeerAuthenticationSpecArgs',
    'PeerAuthenticationSpecMtlsArgs',
    'PeerAuthenticationSpecPortLevelMtlsArgs',
    'PeerAuthenticationSpecSelectorArgs',
    'RequestAuthenticationSpecArgs',
    'RequestAuthenticationSpecJwtRulesArgs',
    'RequestAuthenticationSpecJwtRulesFromHeadersArgs',
    'RequestAuthenticationSpecSelectorArgs',
]

@pulumi.input_type
class PeerAuthenticationSpecArgs:
    def __init__(__self__, *,
                 mtls: Optional[pulumi.Input['PeerAuthenticationSpecMtlsArgs']] = None,
                 port_level_mtls: Optional[pulumi.Input[Mapping[str, pulumi.Input['PeerAuthenticationSpecPortLevelMtlsArgs']]]] = None,
                 selector: Optional[pulumi.Input['PeerAuthenticationSpecSelectorArgs']] = None):
        """
        PeerAuthentication defines how traffic will be tunneled (or not) to the sidecar.
        :param pulumi.Input['PeerAuthenticationSpecMtlsArgs'] mtls: Mutual TLS settings for workload.
        :param pulumi.Input[Mapping[str, pulumi.Input['PeerAuthenticationSpecPortLevelMtlsArgs']]] port_level_mtls: Port specific mutual TLS settings.
        :param pulumi.Input['PeerAuthenticationSpecSelectorArgs'] selector: The selector determines the workloads to apply the ChannelAuthentication on.
        """
        if mtls is not None:
            pulumi.set(__self__, "mtls", mtls)
        if port_level_mtls is not None:
            pulumi.set(__self__, "port_level_mtls", port_level_mtls)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def mtls(self) -> Optional[pulumi.Input['PeerAuthenticationSpecMtlsArgs']]:
        """
        Mutual TLS settings for workload.
        """
        return pulumi.get(self, "mtls")

    @mtls.setter
    def mtls(self, value: Optional[pulumi.Input['PeerAuthenticationSpecMtlsArgs']]):
        pulumi.set(self, "mtls", value)

    @property
    @pulumi.getter(name="portLevelMtls")
    def port_level_mtls(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['PeerAuthenticationSpecPortLevelMtlsArgs']]]]:
        """
        Port specific mutual TLS settings.
        """
        return pulumi.get(self, "port_level_mtls")

    @port_level_mtls.setter
    def port_level_mtls(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['PeerAuthenticationSpecPortLevelMtlsArgs']]]]):
        pulumi.set(self, "port_level_mtls", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input['PeerAuthenticationSpecSelectorArgs']]:
        """
        The selector determines the workloads to apply the ChannelAuthentication on.
        """
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input['PeerAuthenticationSpecSelectorArgs']]):
        pulumi.set(self, "selector", value)


@pulumi.input_type
class PeerAuthenticationSpecMtlsArgs:
    def __init__(__self__, *,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        Mutual TLS settings for workload.
        :param pulumi.Input[str] mode: Defines the mTLS mode used for peer authentication.
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the mTLS mode used for peer authentication.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class PeerAuthenticationSpecPortLevelMtlsArgs:
    def __init__(__self__, *,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] mode: Defines the mTLS mode used for peer authentication.
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the mTLS mode used for peer authentication.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class PeerAuthenticationSpecSelectorArgs:
    def __init__(__self__, *,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The selector determines the workloads to apply the ChannelAuthentication on.
        """
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class RequestAuthenticationSpecArgs:
    def __init__(__self__, *,
                 jwt_rules: Optional[pulumi.Input[Sequence[pulumi.Input['RequestAuthenticationSpecJwtRulesArgs']]]] = None,
                 selector: Optional[pulumi.Input['RequestAuthenticationSpecSelectorArgs']] = None):
        """
        RequestAuthentication defines what request authentication methods are supported by a workload.
        :param pulumi.Input[Sequence[pulumi.Input['RequestAuthenticationSpecJwtRulesArgs']]] jwt_rules: Define the list of JWTs that can be validated at the selected workloads' proxy.
        :param pulumi.Input['RequestAuthenticationSpecSelectorArgs'] selector: Optional.
        """
        if jwt_rules is not None:
            pulumi.set(__self__, "jwt_rules", jwt_rules)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter(name="jwtRules")
    def jwt_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RequestAuthenticationSpecJwtRulesArgs']]]]:
        """
        Define the list of JWTs that can be validated at the selected workloads' proxy.
        """
        return pulumi.get(self, "jwt_rules")

    @jwt_rules.setter
    def jwt_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RequestAuthenticationSpecJwtRulesArgs']]]]):
        pulumi.set(self, "jwt_rules", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input['RequestAuthenticationSpecSelectorArgs']]:
        """
        Optional.
        """
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input['RequestAuthenticationSpecSelectorArgs']]):
        pulumi.set(self, "selector", value)


@pulumi.input_type
class RequestAuthenticationSpecJwtRulesArgs:
    def __init__(__self__, *,
                 audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 forward_original_token: Optional[pulumi.Input[bool]] = None,
                 from_headers: Optional[pulumi.Input[Sequence[pulumi.Input['RequestAuthenticationSpecJwtRulesFromHeadersArgs']]]] = None,
                 from_params: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 jwks: Optional[pulumi.Input[str]] = None,
                 jwks_uri: Optional[pulumi.Input[str]] = None,
                 jwks_uri: Optional[pulumi.Input[str]] = None,
                 output_payload_to_header: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] forward_original_token: If set to true, the original token will be kept for the upstream request.
        :param pulumi.Input[Sequence[pulumi.Input['RequestAuthenticationSpecJwtRulesFromHeadersArgs']]] from_headers: List of header locations from which JWT is expected.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] from_params: List of query parameters from which JWT is expected.
        :param pulumi.Input[str] issuer: Identifies the issuer that issued the JWT.
        :param pulumi.Input[str] jwks: JSON Web Key Set of public keys to validate signature of the JWT.
        """
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if forward_original_token is not None:
            pulumi.set(__self__, "forward_original_token", forward_original_token)
        if from_headers is not None:
            pulumi.set(__self__, "from_headers", from_headers)
        if from_params is not None:
            pulumi.set(__self__, "from_params", from_params)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if jwks is not None:
            pulumi.set(__self__, "jwks", jwks)
        if jwks_uri is not None:
            pulumi.set(__self__, "jwks_uri", jwks_uri)
        if jwks_uri is not None:
            pulumi.set(__self__, "jwks_uri", jwks_uri)
        if output_payload_to_header is not None:
            pulumi.set(__self__, "output_payload_to_header", output_payload_to_header)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "audiences")

    @audiences.setter
    def audiences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "audiences", value)

    @property
    @pulumi.getter(name="forwardOriginalToken")
    def forward_original_token(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, the original token will be kept for the upstream request.
        """
        return pulumi.get(self, "forward_original_token")

    @forward_original_token.setter
    def forward_original_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "forward_original_token", value)

    @property
    @pulumi.getter(name="fromHeaders")
    def from_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RequestAuthenticationSpecJwtRulesFromHeadersArgs']]]]:
        """
        List of header locations from which JWT is expected.
        """
        return pulumi.get(self, "from_headers")

    @from_headers.setter
    def from_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RequestAuthenticationSpecJwtRulesFromHeadersArgs']]]]):
        pulumi.set(self, "from_headers", value)

    @property
    @pulumi.getter(name="fromParams")
    def from_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of query parameters from which JWT is expected.
        """
        return pulumi.get(self, "from_params")

    @from_params.setter
    def from_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "from_params", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        """
        Identifies the issuer that issued the JWT.
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter
    def jwks(self) -> Optional[pulumi.Input[str]]:
        """
        JSON Web Key Set of public keys to validate signature of the JWT.
        """
        return pulumi.get(self, "jwks")

    @jwks.setter
    def jwks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jwks", value)

    @property
    @pulumi.getter(name="jwksUri")
    def jwks_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jwks_uri")

    @jwks_uri.setter
    def jwks_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jwks_uri", value)

    @property
    @pulumi.getter
    def jwks_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jwks_uri")

    @jwks_uri.setter
    def jwks_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jwks_uri", value)

    @property
    @pulumi.getter(name="outputPayloadToHeader")
    def output_payload_to_header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_payload_to_header")

    @output_payload_to_header.setter
    def output_payload_to_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_payload_to_header", value)


@pulumi.input_type
class RequestAuthenticationSpecJwtRulesFromHeadersArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The HTTP header name.
        :param pulumi.Input[str] prefix: The prefix that should be stripped before decoding the token.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP header name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The prefix that should be stripped before decoding the token.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class RequestAuthenticationSpecSelectorArgs:
    def __init__(__self__, *,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Optional.
        """
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)



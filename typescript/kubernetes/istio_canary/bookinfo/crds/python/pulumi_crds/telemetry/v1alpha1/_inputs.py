# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'TelemetrySpecArgs',
    'TelemetrySpecAccessLoggingArgs',
    'TelemetrySpecAccessLoggingFilterArgs',
    'TelemetrySpecAccessLoggingProvidersArgs',
    'TelemetrySpecMetricsArgs',
    'TelemetrySpecMetricsOverridesArgs',
    'TelemetrySpecMetricsOverridesTagOverridesArgs',
    'TelemetrySpecMetricsProvidersArgs',
    'TelemetrySpecSelectorArgs',
    'TelemetrySpecTracingArgs',
    'TelemetrySpecTracingProvidersArgs',
]

@pulumi.input_type
class TelemetrySpecArgs:
    def __init__(__self__, *,
                 access_logging: Optional[pulumi.Input[Sequence[pulumi.Input['TelemetrySpecAccessLoggingArgs']]]] = None,
                 metrics: Optional[pulumi.Input[Sequence[pulumi.Input['TelemetrySpecMetricsArgs']]]] = None,
                 selector: Optional[pulumi.Input['TelemetrySpecSelectorArgs']] = None,
                 tracing: Optional[pulumi.Input[Sequence[pulumi.Input['TelemetrySpecTracingArgs']]]] = None):
        """
        Telemetry configuration for workloads. See more details at: https://istio.io/docs/reference/config/telemetry.html
        :param pulumi.Input[Sequence[pulumi.Input['TelemetrySpecAccessLoggingArgs']]] access_logging: Optional.
        :param pulumi.Input[Sequence[pulumi.Input['TelemetrySpecMetricsArgs']]] metrics: Optional.
        :param pulumi.Input['TelemetrySpecSelectorArgs'] selector: Optional.
        :param pulumi.Input[Sequence[pulumi.Input['TelemetrySpecTracingArgs']]] tracing: Optional.
        """
        if access_logging is not None:
            pulumi.set(__self__, "access_logging", access_logging)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if tracing is not None:
            pulumi.set(__self__, "tracing", tracing)

    @property
    @pulumi.getter(name="accessLogging")
    def access_logging(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TelemetrySpecAccessLoggingArgs']]]]:
        """
        Optional.
        """
        return pulumi.get(self, "access_logging")

    @access_logging.setter
    def access_logging(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TelemetrySpecAccessLoggingArgs']]]]):
        pulumi.set(self, "access_logging", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TelemetrySpecMetricsArgs']]]]:
        """
        Optional.
        """
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TelemetrySpecMetricsArgs']]]]):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input['TelemetrySpecSelectorArgs']]:
        """
        Optional.
        """
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input['TelemetrySpecSelectorArgs']]):
        pulumi.set(self, "selector", value)

    @property
    @pulumi.getter
    def tracing(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TelemetrySpecTracingArgs']]]]:
        """
        Optional.
        """
        return pulumi.get(self, "tracing")

    @tracing.setter
    def tracing(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TelemetrySpecTracingArgs']]]]):
        pulumi.set(self, "tracing", value)


@pulumi.input_type
class TelemetrySpecAccessLoggingArgs:
    def __init__(__self__, *,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 filter: Optional[pulumi.Input['TelemetrySpecAccessLoggingFilterArgs']] = None,
                 providers: Optional[pulumi.Input[Sequence[pulumi.Input['TelemetrySpecAccessLoggingProvidersArgs']]]] = None):
        """
        :param pulumi.Input[bool] disabled: Controls logging.
        :param pulumi.Input['TelemetrySpecAccessLoggingFilterArgs'] filter: Optional.
        :param pulumi.Input[Sequence[pulumi.Input['TelemetrySpecAccessLoggingProvidersArgs']]] providers: Optional.
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if providers is not None:
            pulumi.set(__self__, "providers", providers)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls logging.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['TelemetrySpecAccessLoggingFilterArgs']]:
        """
        Optional.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['TelemetrySpecAccessLoggingFilterArgs']]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def providers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TelemetrySpecAccessLoggingProvidersArgs']]]]:
        """
        Optional.
        """
        return pulumi.get(self, "providers")

    @providers.setter
    def providers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TelemetrySpecAccessLoggingProvidersArgs']]]]):
        pulumi.set(self, "providers", value)


@pulumi.input_type
class TelemetrySpecAccessLoggingFilterArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None):
        """
        Optional.
        :param pulumi.Input[str] expression: CEL expression for selecting when requests/connections should be logged.
        """
        if expression is not None:
            pulumi.set(__self__, "expression", expression)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        CEL expression for selecting when requests/connections should be logged.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)


@pulumi.input_type
class TelemetrySpecAccessLoggingProvidersArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Required.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Required.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class TelemetrySpecMetricsArgs:
    def __init__(__self__, *,
                 overrides: Optional[pulumi.Input[Sequence[pulumi.Input['TelemetrySpecMetricsOverridesArgs']]]] = None,
                 providers: Optional[pulumi.Input[Sequence[pulumi.Input['TelemetrySpecMetricsProvidersArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['TelemetrySpecMetricsOverridesArgs']]] overrides: Optional.
        :param pulumi.Input[Sequence[pulumi.Input['TelemetrySpecMetricsProvidersArgs']]] providers: Optional.
        """
        if overrides is not None:
            pulumi.set(__self__, "overrides", overrides)
        if providers is not None:
            pulumi.set(__self__, "providers", providers)

    @property
    @pulumi.getter
    def overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TelemetrySpecMetricsOverridesArgs']]]]:
        """
        Optional.
        """
        return pulumi.get(self, "overrides")

    @overrides.setter
    def overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TelemetrySpecMetricsOverridesArgs']]]]):
        pulumi.set(self, "overrides", value)

    @property
    @pulumi.getter
    def providers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TelemetrySpecMetricsProvidersArgs']]]]:
        """
        Optional.
        """
        return pulumi.get(self, "providers")

    @providers.setter
    def providers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TelemetrySpecMetricsProvidersArgs']]]]):
        pulumi.set(self, "providers", value)


@pulumi.input_type
class TelemetrySpecMetricsOverridesArgs:
    def __init__(__self__, *,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 match: Optional[Any] = None,
                 tag_overrides: Optional[pulumi.Input[Mapping[str, pulumi.Input['TelemetrySpecMetricsOverridesTagOverridesArgs']]]] = None):
        """
        :param pulumi.Input[bool] disabled: Optional.
        :param Any match: Match allows provides the scope of the override.
        :param pulumi.Input[Mapping[str, pulumi.Input['TelemetrySpecMetricsOverridesTagOverridesArgs']]] tag_overrides: Optional.
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if tag_overrides is not None:
            pulumi.set(__self__, "tag_overrides", tag_overrides)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[Any]:
        """
        Match allows provides the scope of the override.
        """
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[Any]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter(name="tagOverrides")
    def tag_overrides(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['TelemetrySpecMetricsOverridesTagOverridesArgs']]]]:
        """
        Optional.
        """
        return pulumi.get(self, "tag_overrides")

    @tag_overrides.setter
    def tag_overrides(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['TelemetrySpecMetricsOverridesTagOverridesArgs']]]]):
        pulumi.set(self, "tag_overrides", value)


@pulumi.input_type
class TelemetrySpecMetricsOverridesTagOverridesArgs:
    def __init__(__self__, *,
                 operation: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] operation: Operation controls whether or not to update/add a tag, or to remove it.
        :param pulumi.Input[str] value: Value is only considered if the operation is `UPSERT`.
        """
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operation(self) -> Optional[pulumi.Input[str]]:
        """
        Operation controls whether or not to update/add a tag, or to remove it.
        """
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value is only considered if the operation is `UPSERT`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TelemetrySpecMetricsProvidersArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Required.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Required.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class TelemetrySpecSelectorArgs:
    def __init__(__self__, *,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Optional.
        """
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class TelemetrySpecTracingArgs:
    def __init__(__self__, *,
                 custom_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 disable_span_reporting: Optional[pulumi.Input[bool]] = None,
                 providers: Optional[pulumi.Input[Sequence[pulumi.Input['TelemetrySpecTracingProvidersArgs']]]] = None,
                 random_sampling_percentage: Optional[pulumi.Input[float]] = None,
                 use_request_id_for_trace_sampling: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] custom_tags: Optional.
        :param pulumi.Input[bool] disable_span_reporting: Controls span reporting.
        :param pulumi.Input[Sequence[pulumi.Input['TelemetrySpecTracingProvidersArgs']]] providers: Optional.
        """
        if custom_tags is not None:
            pulumi.set(__self__, "custom_tags", custom_tags)
        if disable_span_reporting is not None:
            pulumi.set(__self__, "disable_span_reporting", disable_span_reporting)
        if providers is not None:
            pulumi.set(__self__, "providers", providers)
        if random_sampling_percentage is not None:
            pulumi.set(__self__, "random_sampling_percentage", random_sampling_percentage)
        if use_request_id_for_trace_sampling is not None:
            pulumi.set(__self__, "use_request_id_for_trace_sampling", use_request_id_for_trace_sampling)

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Optional.
        """
        return pulumi.get(self, "custom_tags")

    @custom_tags.setter
    def custom_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_tags", value)

    @property
    @pulumi.getter(name="disableSpanReporting")
    def disable_span_reporting(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls span reporting.
        """
        return pulumi.get(self, "disable_span_reporting")

    @disable_span_reporting.setter
    def disable_span_reporting(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_span_reporting", value)

    @property
    @pulumi.getter
    def providers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TelemetrySpecTracingProvidersArgs']]]]:
        """
        Optional.
        """
        return pulumi.get(self, "providers")

    @providers.setter
    def providers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TelemetrySpecTracingProvidersArgs']]]]):
        pulumi.set(self, "providers", value)

    @property
    @pulumi.getter(name="randomSamplingPercentage")
    def random_sampling_percentage(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "random_sampling_percentage")

    @random_sampling_percentage.setter
    def random_sampling_percentage(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "random_sampling_percentage", value)

    @property
    @pulumi.getter(name="useRequestIdForTraceSampling")
    def use_request_id_for_trace_sampling(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_request_id_for_trace_sampling")

    @use_request_id_for_trace_sampling.setter
    def use_request_id_for_trace_sampling(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_request_id_for_trace_sampling", value)


@pulumi.input_type
class TelemetrySpecTracingProvidersArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Required.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Required.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


